{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","redux/contacts-selectors.js","redux/contacts-operations.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContSuccess","fetchContError","addContactsRequest","addContSuccess","addContError","deleteContactsRequest","deleteContSuccess","deleteContError","changeFilter","items","createReducer","_","payload","state","action","filter","con","id","loading","error","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","contactsReducer","getFilter","getConactsForm","getVisibleContact","createSelector","normalizedFilter","toLowerCase","text","Object","values","includes","axios","defaults","baseURL","dispatch","a","get","data","contItem","post","then","catch","contId","delete","connect","value","contactSelectors","formSubmitHandler","contactOperation","props","useState","name","setName","number","setNumber","handleChange","event","currentTarget","reset","onSubmit","e","preventDefault","checkName","some","item","alert","className","s","form","type","pattern","title","required","onChange","btnForm","visibleContact","fetchContacts","onDeleteCont","useDispatch","useEffect","list","map","onClick","App","ContactForm","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,QAAU,+B,mBCA9FD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,+B,iLCMhDC,EAAuBC,YAAa,yBAEpCC,EAAmBD,YAAa,yBAEhCE,EAAiBF,YAAa,uBAE9BG,EAAqBH,YAAa,uBAClCI,EAAiBJ,YAAa,uBAC9BK,EAAeL,YAAa,qBAE5BM,EAAwBN,YAAa,0BACrCO,EAAoBP,YAAa,0BACjCQ,EAAkBR,YAAa,wBAI/BS,EAAeT,YAAa,mBCJnCU,EAAQC,YAAc,IAAD,mBACxBV,GAAmB,SAACW,EAAD,YAAMC,WADD,cAExBT,GAAiB,SAACU,EAAD,OAAUD,EAAV,EAAUA,QAAV,4BAA4BC,GAA5B,CAAmCD,OAF5B,cAGxBN,GAAoB,SAACO,EAAOC,GAAR,OAAmBD,EAAME,QAAO,SAAAC,GAAG,OAAIA,EAAIC,KAAOH,EAAOF,cAHrD,IAMrBM,EAAUR,aAAc,GAAD,mBAC1BZ,GAAuB,kBAAM,KADH,cAE1BE,GAAmB,kBAAM,KAFC,cAG1BC,GAAiB,kBAAM,KAHG,cAI1BC,GAAqB,kBAAM,KAJD,cAK1BC,GAAiB,kBAAM,KALG,cAM1BC,GAAe,kBAAM,KANK,cAO1BC,GAAwB,kBAAM,KAPJ,cAQ1BC,GAAoB,kBAAM,KARA,cAS1BC,GAAkB,kBAAM,KATE,IAYvBQ,EAASL,YAAc,GAAD,eACzBF,GAAe,SAACG,EAAD,YAAMC,YAGlBO,EAAQT,YAAc,MAAD,mBACxBT,GAAiB,SAACU,EAAD,YAAMC,WADC,cAExBR,GAAe,SAACO,EAAD,YAAMC,WAFG,cAGxBL,GAAkB,SAACI,EAAD,YAAMC,WAHA,IAMZQ,cAAgB,CAC7BX,QACAM,SACAG,UACAC,UC/CIE,EAAU,sBAAOC,eAAP,CAA+BC,MAShCC,EARDC,YAAe,CAC3BC,QAAS,CACPC,SAAUC,GAEZP,e,6BCNIQ,EAAY,SAAAhB,GAAK,OAAIA,EAAMc,SAASZ,QACpCe,EAAiB,SAAAjB,GAAK,OAAIA,EAAMc,UAiBhCI,EAAoBC,YAAe,CAhBlB,SAAAnB,GAErB,OADiBiB,EAAejB,GAChBJ,OAcwCoB,IAAY,SAACF,EAAUZ,GAC/E,IAAMkB,EAAmBlB,EAAOmB,cAEhC,OAAOP,EAASZ,QAAO,SAAAoB,GAErB,OAAOC,OAAOC,OAAOF,GAAM,GAAGD,cAAcI,SAASL,SAI1C,GACbH,iBACAD,YACAE,qB,yCClBFQ,IAAMC,SAASC,QAAU,wBAIzB,IAiCe,EAjCM,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DACzBD,EAAS5C,KADgB,kBAGAyC,IAAMK,IAAI,aAHV,gBAGfC,EAHe,EAGfA,KACRH,EAAS1C,EAAiB6C,IAJH,gDAMvBH,EAASzC,EAAe,EAAD,KANA,yDAAN,uDAiCN,EAvBI,SAAAkC,GAAI,OAAI,SAAAO,GAIzB,IAAMI,EAAWX,EAEjBO,EAASxC,GAETqC,IACGQ,KAAK,YAAaD,GAClBE,MAAK,gBAAGH,EAAH,EAAGA,KAAH,OAAcH,EAASvC,EAAe0C,OAC3CI,OAAM,SAAA9B,GAAK,OAAIuB,EAAStC,EAAae,SAY3B,EATO,SAAA+B,GAAM,OAAI,SAAAR,GAE9BA,EAASrC,KACTkC,IACGY,OADH,oBACuBD,IACpBF,MAAK,kBAAMN,EAASpC,EAAkB4C,OACtCD,OAAM,SAAA9B,GAAK,OAAIuB,EAASnC,EAAgBY,S,wBC6B7C,IAYeiC,eAZS,SAAAvC,GAEtB,MAAO,CACLwC,MAAOC,EAAiBxB,eAAejB,OAGhB,SAAA6B,GACzB,MAAO,CACLa,kBAAmB,SAACF,GAAD,OAAWX,EAASc,EAA4BH,QAIxDD,EAnFf,SAAcK,GAEZ,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAGKC,EAAe,SAAAC,GAClB,MAAwBA,EAAMC,cAAtBN,EAAR,EAAQA,KAAMN,EAAd,EAAcA,MACD,SAATM,EAIS,WAATA,GACFG,EAAUT,GAJVO,EAAQP,IA0BNa,EAAQ,WACZN,EAAQ,IACRE,EAAU,KAGV,OACS,uBAAMK,SArBI,SAAAC,GACnBA,EAAEC,iBAEE,IAAMC,EAAYX,EAAKzB,cACrBuB,EAAMJ,MAAM5C,MAAM8D,MAAK,SAAAC,GAAI,OAAIA,EAAKb,KAAKzB,gBAAV,UAA+BoC,MAChEG,MAAM,GAAD,OAAId,EAAJ,6BAMTF,EAAMF,kBAAkB,CAAEI,OAAME,WAChCK,MASuCQ,UAAWC,IAAEC,KAA3C,iBAGH,uBACEC,KAAK,OACLlB,KAAK,OACLmB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR3B,MAAOM,EACPsB,SAAUlB,IAVT,SAeH,uBACEc,KAAK,MACLlB,KAAK,SACLmB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACR3B,MAAOQ,EACPoB,SAAUlB,IAGZ,wBAAQc,KAAK,SAASH,UAAWC,IAAEO,QAAnC,+BCpDK9B,eARS,SAAAvC,GAAK,MAAK,CAC9BwC,MAAOC,EAAiBzB,UAAUhB,OAGX,SAAA6B,GAAQ,MAAK,CACpCuC,SAAU,SAACb,GAAD,OAAK1B,EAASlC,EAAa4D,EAAEH,cAAcZ,YAG1CD,EAhBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO4B,EAAV,EAAUA,SAAV,OACb,0DAEE,uBACA,uBAAOJ,KAAK,OAAOxB,MAAOA,EAAO4B,SAAUA,U,kBC6BhC7B,gBATS,SAACvC,GACvB,MAAO,CAAEsE,eAAgB7B,EAAiBvB,kBAAkBlB,OAGnC,SAAA6B,GAAQ,MAAK,CACtC0C,cAAe,kBAAI1C,EAASc,IAC5B6B,aAAc,SAAApE,GAAE,OAAIyB,EAASc,EAA+BvC,QAG/CmC,EA7BK,SAAC,GAAqD,IAAnD+B,EAAkD,EAAlDA,eAAgBE,EAAkC,EAAlCA,aAAcD,EAAoB,EAApBA,cAC7C1C,EAAW4C,cAKnB,OAFEC,qBAAU,kBAAM7C,EAAS0C,OAAkB,CAAC1C,IAG3C,oBAAIgC,UAAWC,KAAEa,KAAjB,SACEL,EAAeM,KAAI,gBAAGxE,EAAH,EAAGA,GAAI0C,EAAP,EAAOA,KAAME,EAAb,EAAaA,OAAb,OAClB,qBAAaa,UAAWC,KAAEH,KAA1B,UACGb,EADH,IACS,+BAAOE,IACd,wBAAQgB,KAAK,SAASa,QAAS,kBAAML,EAAapE,IAAKyD,UAAWC,KAAEO,QAApE,sBAFOjE,WCMA0E,OAhBf,WACE,OACE,sBAAKjB,UAAU,YAAf,UACE,2CAEA,cAACkB,EAAD,IAEA,0CAEA,cAAC,EAAD,IAEA,cAAC,GAAD,QCZNC,QAAQC,IAAItE,GACZuE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzE,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJ0E,SAASC,eAAe,W","file":"static/js/main.ba298e60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3wIz_\",\"item\":\"ContactList_item__wmeUX\",\"btnForm\":\"ContactList_btnForm__3Dhqs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1zEy-\",\"btnForm\":\"ContactForm_btnForm__2RhGh\"};","/* eslint-disable no-restricted-globals */\r\n/* eslint-disable no-undef */\r\n/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// синхронные Экшена\r\n// pending\r\nexport const fetchContactsRequest = createAction('cont/fetchContRequest');\r\n// fulfiled\r\nexport const fetchContSuccess = createAction('cont/fetchContSuccess');\r\n// rejected\r\nexport const fetchContError = createAction('cont/fetchContError');\r\n\r\nexport const addContactsRequest = createAction('cont/addContRequest');\r\nexport const addContSuccess = createAction('cont/addContSuccess');\r\nexport const addContError = createAction('cont/addContError');\r\n\r\nexport const deleteContactsRequest = createAction('cont/deleteContRequest');\r\nexport const deleteContSuccess = createAction('cont/deleteContSuccess');\r\nexport const deleteContError = createAction('cont/deleteContError');\r\n\r\n// export const deleteContact = createAction('contacts.delete');\r\n\r\nexport const changeFilter = createAction('contacts.filter');\r\n\r\n// export default {addContactsRequest,addContSuccess,addContError,  addContact, deleteContact, changeFilter };\r\n\r\n// dispatch({ type: 'cont/addContSuccess', payload: { data } })\r\n// const addContact = createAction('contacts.add', function prepare({ name, number }) {\r\n//   return {\r\n//     payload: {\r\n//       id: shortid.generate(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   };\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContSuccess,\r\n  fetchContError,\r\n  addContactsRequest,\r\n  addContSuccess,\r\n  addContError,\r\n  deleteContactsRequest,\r\n  deleteContSuccess,\r\n  deleteContError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n// import initialContact from '../data/start-data.json';...initialContact\r\n\r\n// console.log('actions.deleteContact.type', actions.deleteContact.type);\r\n\r\nconst items = createReducer([], {\r\n  [fetchContSuccess]: (_, { payload }) => payload,\r\n  [addContSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContSuccess]: (state, action) => state.filter(con => con.id !== action.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContSuccess]: () => false,\r\n  [fetchContError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContSuccess]: () => false,\r\n  [addContError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContSuccess]: () => false,\r\n  [deleteContError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContError]: (_, { payload }) => payload,\r\n  [addContError]: (_, { payload }) => payload,\r\n  [deleteContError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  // devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n\r\n// const myMiddleware = store => next => action => {\r\n//   console.log('hello', action);\r\n//   next(action); //передает управление экшенм дальше по цепочке\r\n// };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createSelector } from 'reselect';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getConactsForm = state => state.contacts;\r\nconst getAllContacts = state => {\r\n  const contacts = getConactsForm(state);\r\n  return contacts.items;\r\n};\r\n//Составной-композитный селектор\r\n// const getVisibleContact = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(text => {\r\n//     console.log('Object.values(text)[0]', Object.values(text)[0]);\r\n//     return Object.values(text)[0].toLowerCase().includes(normalizedFilter);\r\n//   });\r\n// };\r\n// Мемоизация - (contacts, filter) - кэшируются эти два аргумента\r\nconst getVisibleContact = createSelector([getAllContacts, getFilter], (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(text => {\r\n    // console.log('Object.values(text)[0]', Object.values(text)[0]);\r\n    return Object.values(text)[0].toLowerCase().includes(normalizedFilter);\r\n  });\r\n});\r\n\r\nexport default {\r\n  getConactsForm,\r\n  getFilter,\r\n  getVisibleContact,\r\n};\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContSuccess,\r\n  fetchContError,\r\n  addContactsRequest,\r\n  addContSuccess,\r\n  addContError,\r\n  deleteContactsRequest,\r\n  deleteContSuccess,\r\n  deleteContError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\n// axios.get('/contacts').then(response => response.data);\r\n\r\nconst fetchContact = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContError(error));\r\n  }\r\n};\r\n\r\nconst addContact = text => dispatch => {\r\n  //http  и по результату диспатчит синхронные экшны\r\n  // console.log('--------text', text);\r\n\r\n  const contItem = text;\r\n\r\n  dispatch(addContactsRequest);\r\n\r\n  axios\r\n    .post('/contacts', contItem)\r\n    .then(({ data }) => dispatch(addContSuccess(data)))\r\n    .catch(error => dispatch(addContError(error)));\r\n};\r\n\r\nconst deleteContact = contId => dispatch => {\r\n  //for show PreLoader\r\n  dispatch(deleteContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${contId}`)\r\n    .then(() => dispatch(deleteContSuccess(contId)))\r\n    .catch(error => dispatch(deleteContError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\n// {\r\n//     {name,number },\r\n//     id\r\n// }\r\n\r\n// До асинк\r\n// const fetchContact = () => dispatch => {\r\n//   dispatch(fetchContactsRequest());\r\n\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContSuccess(data)))\r\n//     .catch(error => dispatch(fetchContError(error)));\r\n// };\r\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n// import operationContact from '../../redux/contacts-operations';\n// import contactSelectors from '../../redux/contacts-selectors';\nimport {contactOperation, contactSelectors} from '../../redux/'\nimport s from './ContactForm.module.css'\n  \nfunction Form(props) {\n  //Этот стейт оставляю\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('')\n    \n    \n const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n      return\n    }\n    if (name === 'number') {\n      setNumber(value)\n    }   \n };\n  \n  // console.log('props.value.items',props.value.items);\n  // console.log('props', props);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n  //\n        const checkName = name.toLowerCase();\n      if (props.value.items.some(item => item.name.toLowerCase() === `${checkName}`)) {\n        alert(`${name} is already in contacts`);\n        //  reset();\n        return;\n      }\n\n    // сразу отправляется в Глоб. Стейт-Redax state\n    props.formSubmitHandler({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  };\n    \n    return (\n             <form onSubmit={handleSubmit} className={s.form}>\n          Name\n          \n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n         \n          Number\n         \n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n          \n          <button type=\"submit\" className={s.btnForm}>Add contact</button>\n        </form>\n        )\n}\n\nconst mapStateToProps = state => {\n  // console.log('Form-state',state);\n  return {\n    value: contactSelectors.getConactsForm(state),\n  }\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    formSubmitHandler: (value) => dispatch(contactOperation.addContact(value)),\n  }\n  };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n\n// const mapStateToProps = state => {\n//   console.log('Form-state',state);\n//   return {\n//     value: state.contacts,\n//   }\n// };","import React from 'react';\nimport { connect } from 'react-redux';\n// import * as contactActions from '../../redux/contacts-actions';\nimport { contactSelectors, changeFilter } from '../../redux/';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n    value: contactSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (e)=>dispatch(changeFilter(e.currentTarget.value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\n// const mapStateToProps = state => ({\n//     value: state.contacts.filter,\n// });","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { connect } from 'react-redux';\n// import {deleteContact} from '../../redux/contacts-actions';\n// import contactOperation from '../../redux/contacts-operations';\n// import contactSelectors from '../../redux/contacts-selectors';\nimport {contactOperation, contactSelectors} from '../../redux/'\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ visibleContact, onDeleteCont, fetchContacts }) => {\n  const dispatch = useDispatch();\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n  \nreturn (\n   <ul className={s.list}>\n    {visibleContact.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        {name}:<span>{number}</span>\n        <button type=\"button\" onClick={() => onDeleteCont(id)} className={s.btnForm}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n};\n\nconst mapStateToProps = (state) => {\n  return { visibleContact: contactSelectors.getVisibleContact(state), }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: ()=>dispatch(contactOperation.fetchContact),\n  onDeleteCont: id => dispatch(contactOperation.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n/* was: this.state.contact */\n\n// const visibleContact = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContact = contacts.filter(con =>\n//     con.name.toLowerCase().includes(normalizedFilter),\n//   );\n//   return visibleContact;\n// };\n\n// const mapStateToProps = state => {\n//     const { items, filter } = state.contacts;\n//     const normalizedFilter = filter.toLowerCase();\n//     const visibleContact = items.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return {\n//         visibleContact: visibleContact,\n//     }\n// };\n\n// --------\n// const getVisibleContact = (allContacts, filter) => {\n//   console.log('allContacts', ...allContacts);\n//   console.log('filter', filter);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter((text) => {console.log('Object.values(text)[0]',Object.values(text)[0]); return Object.values(text)[0].toLowerCase().includes(normalizedFilter) });\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => {\n//   console.log('items', items[0]);\n//   console.log('filter',filter );\n//   return { visibleContact: getVisibleContact(items, filter), }\n// };","import '../App/App.css';\nimport React from 'react';\n// import { connect } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n// Вся информация забирается с локал стоража\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      {/* <ContactForm formSubmitHandler={formSubmitHandler} /> */}\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\n      <Filter />\n      {/* <ContactList visibleContact={visibleContact()} onDeleteCont={onDeleteCont} /> */}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.items,\n//   }\n// }\n// export default connect(mapStateToProps)(App);\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContact,\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsetContacts = JSON.parse(contacts);\n\n//     if (parsetContacts) {\n//       this.setState({\n//         contacts: [...parsetContacts],\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     // console.log('prevState.contacts', prevState.contacts);\n//     // console.log('this.state.contacts', this.state.contacts);\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   formSubmitHandler = ({ name, number }) => {\n//     const cont = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const checkName = cont.name.toLowerCase();\n//     if (this.state.contacts.some(item => item.name.toLowerCase() === `${checkName}`)) {\n//       alert(`${cont.name} is already in contacts`);\n//       return;\n//     }\n//     this.setState(prevState => {\n//       const contacts = [...prevState.contacts, cont];\n//       return {\n//         contacts,\n//       };\n//     });\n//     // console.log('Arr', this.state.contacts);\n//   };\n\n//   changeFilter = e => {\n//     // console.log(e.currentTarget.value);\n//     this.setState({\n//       filter: e.currentTarget.value,\n//     });\n//   };\n\n//   onDeleteCont = id => {\n//     // console.log(id);\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(con => con.id !== id),\n//     }));\n//   };\n//   // filter создаёт НОВЫЙ массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.\n\n//   visibleContact = () => {\n//     const normalizedFilter = this.state.filter.toLowerCase();\n//     const visibleContact = this.state.contacts.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return visibleContact;\n//   };\n\n//   render() {\n//     // const normalizedFilter = this.state.filter.toLowerCase();\n//     // const visibleContact = this.state.contacts.filter(con =>\n//     //   con.name.toLowerCase().includes(normalizedFilter),\n//     // );\n//     return (\n//       <div className=\"container\">\n//         <h1>Phonebook</h1>\n\n//         <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n//         <ContactList visibleContact={this.visibleContact()} onDeleteCont={this.onDeleteCont} />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\n\nimport './index.css';\nimport App from './components/App/App.js';\nconsole.log(store);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}