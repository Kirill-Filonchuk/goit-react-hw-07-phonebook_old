{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","console","log","actions","type","items","createReducer","initialContact","state","action","filter","con","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","connect","value","dispatch","formSubmitHandler","actionsContact","props","useState","setName","setNumber","handleChange","event","currentTarget","reset","onSubmit","e","preventDefault","checkName","toLowerCase","some","item","alert","className","s","form","pattern","title","required","onChange","btnForm","getVisibleContact","allContacts","normalizedFilter","includes","visibleContact","onDeleteCont","list","map","onClick","App","ContactForm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc9d3856.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3wIz_\",\"item\":\"ContactList_item__wmeUX\",\"btnForm\":\"ContactList_btnForm__3Dhqs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1zEy-\",\"btnForm\":\"ContactForm_btnForm__2RhGh\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts.add', function prepare({ name, number }) {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('contacts.delete');\r\n\r\nconst changeFilter = createAction('contacts.filter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport actions from './contacts-actions';\r\nimport initialContact from '../data/start-data.json';\r\n\r\nconsole.log('actions.deleteContact.type', actions.deleteContact.type);\r\n\r\nconst items = createReducer([...initialContact], {\r\n  [actions.addContact]: (state, action) => [...state, action.payload],\r\n  [actions.deleteContact]: (state, action) => state.filter(con => con.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactForm.module.css'\n  \nfunction Form(props) {\n  //Этот стейт оставляю\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('')\n    \n    \n const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n      return\n    }\n    if (name === 'number') {\n      setNumber(value)\n    }   \n };\n  \n  // console.log('props.value.items',props.value.items);\n  // console.log('props', props);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n  //\n        const checkName = name.toLowerCase();\n      if (props.value.items.some(item => item.name.toLowerCase() === `${checkName}`)) {\n        alert(`${name} is already in contacts`);\n        //  reset();\n        return;\n      }\n\n    // сразу отправляется в Глоб. Стейт-Redax state\n    props.formSubmitHandler({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  };\n    \n    return (\n             <form onSubmit={handleSubmit} className={s.form}>\n          Name\n          \n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n         \n          Number\n         \n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n          \n          <button type=\"submit\" className={s.btnForm}>Add contact</button>\n        </form>\n        )\n}\n\nconst mapStateToProps = state => {\n  // console.log('state',state);\n  return {\n    value: state.contacts,\n  }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    formSubmitHandler: (value) => dispatch(actionsContact.addContact(value)),\n  }\n  };\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (e)=>dispatch(actionsContact.changeFilter(e.currentTarget.value))\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ visibleContact, onDeleteCont }) => (\n  <ul className={s.list}>\n    {visibleContact.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        {name}:<span>{number}</span>\n        <button type=\"button\" onClick={() => onDeleteCont(id)} className={s.btnForm}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n//вспомогательная функция - селектор\nconst getVisibleContact = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(con => con.name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  visibleContact: getVisibleContact(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteCont: id => dispatch(actionsContact.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n\n/* was: this.state.contact */\n\n// const visibleContact = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContact = contacts.filter(con =>\n//     con.name.toLowerCase().includes(normalizedFilter),\n//   );\n//   return visibleContact;\n// };\n\n// const mapStateToProps = state => {\n//     const { items, filter } = state.contacts;\n//     const normalizedFilter = filter.toLowerCase();\n//     const visibleContact = items.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return {\n//         visibleContact: visibleContact,\n//     }\n// };\n","import '../App/App.css';\nimport React from 'react';\n// import { connect } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n// Вся информация забирается с локал стоража\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      {/* <ContactForm formSubmitHandler={formSubmitHandler} /> */}\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\n      <Filter />\n      {/* <ContactList visibleContact={visibleContact()} onDeleteCont={onDeleteCont} /> */}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.items,\n//   }\n// }\n// export default connect(mapStateToProps)(App);\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContact,\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsetContacts = JSON.parse(contacts);\n\n//     if (parsetContacts) {\n//       this.setState({\n//         contacts: [...parsetContacts],\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     // console.log('prevState.contacts', prevState.contacts);\n//     // console.log('this.state.contacts', this.state.contacts);\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   formSubmitHandler = ({ name, number }) => {\n//     const cont = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const checkName = cont.name.toLowerCase();\n//     if (this.state.contacts.some(item => item.name.toLowerCase() === `${checkName}`)) {\n//       alert(`${cont.name} is already in contacts`);\n//       return;\n//     }\n//     this.setState(prevState => {\n//       const contacts = [...prevState.contacts, cont];\n//       return {\n//         contacts,\n//       };\n//     });\n//     // console.log('Arr', this.state.contacts);\n//   };\n\n//   changeFilter = e => {\n//     // console.log(e.currentTarget.value);\n//     this.setState({\n//       filter: e.currentTarget.value,\n//     });\n//   };\n\n//   onDeleteCont = id => {\n//     // console.log(id);\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(con => con.id !== id),\n//     }));\n//   };\n//   // filter создаёт НОВЫЙ массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.\n\n//   visibleContact = () => {\n//     const normalizedFilter = this.state.filter.toLowerCase();\n//     const visibleContact = this.state.contacts.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return visibleContact;\n//   };\n\n//   render() {\n//     // const normalizedFilter = this.state.filter.toLowerCase();\n//     // const visibleContact = this.state.contacts.filter(con =>\n//     //   con.name.toLowerCase().includes(normalizedFilter),\n//     // );\n//     return (\n//       <div className=\"container\">\n//         <h1>Phonebook</h1>\n\n//         <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n//         <ContactList visibleContact={this.visibleContact()} onDeleteCont={this.onDeleteCont} />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\n\nimport './index.css';\nimport App from './components/App/App.js';\nconsole.log(store);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}